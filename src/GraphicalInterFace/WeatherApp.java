/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GraphicalInterFace;

import Sensors.Interfaces.City;
import Sensors.Interfaces.IHumidity;
import Sensors.Interfaces.IPressure;
import Sensors.Interfaces.ITempreture;
import Sensors.Interfaces.Sensor;
import Sensors.core.CityFactory;
import Sensors.core.DataAnalyticsImpl;
import Sensors.core.MeasurmentsImpl;
import Sensors.util.Date;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JFileChooser;

/**
 *
 * @author belal
 */
public class WeatherApp extends javax.swing.JFrame {

    File f;
    String fileName;
    Date date12, date22;
    CityFactory cf;
    DataAnalyticsImpl data;
    ArrayList<City> citiesArray = new ArrayList<>();
    ArrayList<String> citiesArrayNames= new ArrayList<>();
    Date minDate, maxDate;
    /**
     * Creates new form WeatherApp
     */
    public WeatherApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Start = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        city = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        date2 = new javax.swing.JTextField();
        date1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fileDirectory = new javax.swing.JTextField();
        methods = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fileChooseButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Weather Sensor App");
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1500, 800));
        setPreferredSize(new java.awt.Dimension(1400, 700));

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(1400, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Start.setBackground(new java.awt.Color(255, 255, 255));
        Start.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 14)); // NOI18N
        Start.setForeground(new java.awt.Color(0, 102, 102));
        Start.setText("OK");
        Start.setToolTipText("");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });
        jPanel1.add(Start, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 460, 130, 40));

        jLabel6.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("City:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 410, -1, -1));

        city.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        city.setForeground(new java.awt.Color(0, 102, 102));
        city.setText("leave empty");
        city.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityActionPerformed(evt);
            }
        });
        jPanel1.add(city, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 410, 120, 40));

        jLabel3.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date2:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 370, -1, -1));

        date2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        date2.setForeground(new java.awt.Color(0, 102, 102));
        date2.setText("day/month/year");
        date2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date2ActionPerformed(evt);
            }
        });
        jPanel1.add(date2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 120, 40));

        date1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        date1.setForeground(new java.awt.Color(0, 102, 102));
        date1.setText("day/month/year");
        date1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date1ActionPerformed(evt);
            }
        });
        jPanel1.add(date1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 310, 120, 40));

        jLabel5.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Date1:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, -1, -1));
        jPanel1.add(fileDirectory, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 268, 30));

        methods.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        methods.setForeground(new java.awt.Color(0, 102, 102));
        methods.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "hottest Temperature", "Average Measurements Of A City", "Sort Cities By Temperature", "Alert" }));
        methods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodsActionPerformed(evt);
            }
        });
        jPanel1.add(methods, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Choose Operation:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("File:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, -1, -1));

        fileChooseButton.setBackground(new java.awt.Color(255, 255, 255));
        fileChooseButton.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        fileChooseButton.setForeground(new java.awt.Color(0, 102, 102));
        fileChooseButton.setText("select");
        fileChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(fileChooseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, 70, 30));

        jLabel7.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 48)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Weather App ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        output.setColumns(20);
        output.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        output.setRows(5);
        output.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        output.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                outputHierarchyChanged(evt);
            }
        });
        jScrollPane1.setViewportView(output);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, 560, 470));

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\khaled helal\\Desktop\\172\\CS102-project-GUI\\Project2\\src\\Cloud-icon.png")); // NOI18N
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 70, 290, 270));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1468, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_outputHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_outputHierarchyChanged

    private void fileChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooseButtonActionPerformed
        try {
            JFileChooser choose = new JFileChooser();
            choose.showOpenDialog(null);
            f = choose.getSelectedFile();
            fileName = f.getAbsolutePath();
            fileDirectory.setText(fileName);
            data = DataAnalyticsImpl.getInstance(fileName);
            citiesArray = data.getCities();
            for(City c: citiesArray){
                citiesArrayNames.add(c.getName().toUpperCase());
            }
            minDate = data.minDate();
            maxDate = data.maxDate();
        } catch (Exception ex) {
            String out = "Please Make Sure the file selected follows the form:\n"
                    + "{cityName;latitude;longitude;temperature;temperatureUnit;\n"
                    + "humidity;humidityUnit;pressure;pressureUnit;distance;distanceUnit;date}\n(in one line)";
            output.setText(out);
        }
    }//GEN-LAST:event_fileChooseButtonActionPerformed

    private void methodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodsActionPerformed
        String choose = methods.getSelectedItem().toString();

        switch (choose) {
            case "hottest Temperature": {
                city.setText("leave empty");
                break;
            }
            case "Average Measurements Of A City": {
                city.setText("Enter City");
                break;
            }
            case "Sort Cities By Temperature": {
                city.setText("leave empty");
                break;
            }
            case "Alert": {
                city.setText("Enter City");
                break;
            }

        }
    }//GEN-LAST:event_methodsActionPerformed

    private void date1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_date1ActionPerformed

    private void date2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_date2ActionPerformed

    private void cityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityActionPerformed

    }//GEN-LAST:event_cityActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        String choose = methods.getSelectedItem().toString();
        cf = (CityFactory) CityFactory.getInstance();
        try {
            data = DataAnalyticsImpl.getInstance(fileName);
            switch (choose) {
                case "hottest Temperature": {

                    String[] date1info = date1.getText().split("/");
                    String[] date2info = date2.getText().split("/");
                    date12 = new Date(Integer.parseInt(date1info[0]), Integer.parseInt(date1info[1]), Integer.parseInt(date1info[2]));
                    date22 = new Date(Integer.parseInt(date2info[0]), Integer.parseInt(date2info[1]), Integer.parseInt(date2info[2]));
                    
                    if (date12.compareTo(date22) == 0) {
                        output.setText("enter dates exclusively");
                        break;
                    }
                    if(date12.compareTo(minDate)<0 && date22.compareTo(minDate)<0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    if(date12.compareTo(maxDate)>0 && date22.compareTo(maxDate)>0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    Map<City, Sensor> maxTempMap = data.hottestTemperature(date12, date22);
                    String out = "HOTTEST TEMPERATURE BETWEEN " + date12 + " AND " + date22 + "\n";
                    for (City c : maxTempMap.keySet()) {
                        out += String.format("%-10s->\t%.2f\n", c.getName(), maxTempMap.get(c).getValue());
                    }

                    output.setText(out);
                    break;
                }
                case "Average Measurements Of A City": {
                    String[] date1info = date1.getText().split("/");
                    String[] date2info = date2.getText().split("/");
                    date12 = new Date(Integer.parseInt(date1info[0]), Integer.parseInt(date1info[1]), Integer.parseInt(date1info[2]));
                    date22 = new Date(Integer.parseInt(date2info[0]), Integer.parseInt(date2info[1]), Integer.parseInt(date2info[2]));
                    if (date12.compareTo(date22) == 0) {
                        output.setText("enter dates exclusively");
                        break;
                    }
                    if(date12.compareTo(minDate)<0 && date22.compareTo(minDate)<0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    if(date12.compareTo(maxDate)>0 && date22.compareTo(maxDate)>0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    if(!citiesArrayNames.contains(city.getText().toUpperCase())){
                        output.setText("City is not in the file");
                        break;
                    }
                    City city2 = cf.getCity(city.getText());
                    MeasurmentsImpl m = (MeasurmentsImpl) data.averageMeasurements(city2, date12, date22);
                    ITempreture tempValue = m.getTemperatureSensor();
                    IHumidity humValue = m.getHumiditySensor();
                    IPressure preValue = m.getPressureSensor();
                    String out = "AVERAGE VALUES OF CITY " + city2.getName().toUpperCase() + " BETWEEN " + date12 + " AND " + date22 + "\n";
                    out += String.format("%s -> %s -> %s -> %s\n", city2.getName(), tempValue, humValue, preValue);
                    output.setText(out);
                    break;
                }
                case "Sort Cities By Temperature": {
                    String[] date1info = date1.getText().split("/");
                    String[] date2info = date2.getText().split("/");
                    date12 = new Date(Integer.parseInt(date1info[0]), Integer.parseInt(date1info[1]), Integer.parseInt(date1info[2]));
                    date22 = new Date(Integer.parseInt(date2info[0]), Integer.parseInt(date2info[1]), Integer.parseInt(date2info[2]));
                    if (date12.compareTo(date22) == 0) {
                        output.setText("enter dates exclusively");
                        break;
                    }
                    if(date12.compareTo(minDate)<0 && date22.compareTo(minDate)<0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    if(date12.compareTo(maxDate)>0 && date22.compareTo(maxDate)>0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    Set<City> cities = data.citiesByTemperature(date12, date22);
                    Iterator<City> cIt = cities.iterator();
                    String out = "SET OF CITIES ORGANIZED BY THEIR INCREASING ORDER OF AVG TEMPERATURE\n";
                    while (cIt.hasNext()) {
                        out += cIt.next().getName() + " -> ";
                    }
                    out = out.substring(0, out.lastIndexOf("->"));
                    output.setText(out);
                    break;
                }
                case "Alert": {
                    String[] date1info = date1.getText().split("/");
                    String[] date2info = date2.getText().split("/");
                    date12 = new Date(Integer.parseInt(date1info[0]), Integer.parseInt(date1info[1]), Integer.parseInt(date1info[2]));
                    date22 = new Date(Integer.parseInt(date2info[0]), Integer.parseInt(date2info[1]), Integer.parseInt(date2info[2]));
                    if (date12.compareTo(date22) == 0) {
                        output.setText("enter dates exclusively");
                        break;
                    }
                    if(date12.compareTo(minDate)<0 && date22.compareTo(minDate)<0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    if(date12.compareTo(maxDate)>0 && date22.compareTo(maxDate)>0)
                    {
                        output.setText("Both Dates are not in the file");
                        break;
                    }
                    if(!citiesArrayNames.contains(city.getText().toUpperCase())){
                        output.setText("City is not in the file");
                        break;
                    }
                    City city2 = cf.getCity(city.getText());
                    ArrayList<Integer> alerts = data.alert(city2, date12, date22);
                    String out = String.format("ALERTS OF CITY %s BETWEEN %s AND %s\n", city2.getName().toUpperCase(), date12, date22);
                    //out+=String.format("Temperature: %d\nHumidity: %d\nPressure: %d\nDistance:%d",alerts.get(1),alerts.get(3),alerts.get(2),alerts.get(0));
                    out += String.format("Distance Alert: %d\n"
                            + "Temperature Alert: %d\n"
                            + "Pressure Alert: %d\n"
                            + "Humidity Alert: %d\n\n", alerts.get(0), alerts.get(1), alerts.get(2), alerts.get(3));
                    output.setText(out);
                    break;
                }

            }
        } catch (IOException e) {

            String out = "Please Make Sure the file selected follows the form:\n"
                    + "{cityName;latitude;longitude;temperature;temperatureUnit;\n"
                    + "humidity;humidityUnit;pressure;pressureUnit;distance;distanceUnit;date}(in one line)\n";
            output.setText(out);

        } catch (NullPointerException ex) {

            String out = "Please Make Sure the file selected follows the form:\n"
                    + "{cityName;latitude;longitude;temperature;temperatureUnit;\n"
                    + "humidity;humidityUnit;pressure;pressureUnit;distance;distanceUnit;date}(in one line)\n";
            output.setText(out);
        } catch (IllegalArgumentException e) {
            String out = "Date or City Are Not Correct";
            output.setText(out);

        } catch (java.util.NoSuchElementException ne) {
            String out = "Date or City Are Not Correct";
            output.setText(out);
        } catch (java.lang.ArrayIndexOutOfBoundsException an) {
            String out = "Date or City Are Not Correct";
            output.setText(out);
        }
    }//GEN-LAST:event_StartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Start;
    private javax.swing.JTextField city;
    private javax.swing.JTextField date1;
    private javax.swing.JTextField date2;
    private javax.swing.JButton fileChooseButton;
    private javax.swing.JTextField fileDirectory;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> methods;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables
}
